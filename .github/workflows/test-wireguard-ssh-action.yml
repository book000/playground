---
name: Test WireGuard SSH Action

on:
  workflow_dispatch: true
  push:
    paths:
      - 'action.yml'
      - '.github/workflows/test-wireguard-ssh-action.yml'
  pull_request:
    paths:
      - 'action.yml'
      - '.github/workflows/test-wireguard-ssh-action.yml'

jobs:
  test-action:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          # Generate SSH key pair for testing
          ssh-keygen -t rsa -b 2048 -f ./test_ssh_key -N ""

          # Generate WireGuard keys
          sudo apt-get update
          sudo apt-get install -y wireguard-tools

          # Generate client private key
          CLIENT_PRIVATE_KEY=$(wg genkey)
          CLIENT_PUBLIC_KEY=$(echo "$CLIENT_PRIVATE_KEY" | wg pubkey)

          # Generate server private key
          SERVER_PRIVATE_KEY=$(wg genkey)
          SERVER_PUBLIC_KEY=$(echo "$SERVER_PRIVATE_KEY" | wg pubkey)

          echo "CLIENT_PRIVATE_KEY=$CLIENT_PRIVATE_KEY" >> $GITHUB_ENV
          echo "CLIENT_PUBLIC_KEY=$CLIENT_PUBLIC_KEY" >> $GITHUB_ENV
          echo "SERVER_PRIVATE_KEY=$SERVER_PRIVATE_KEY" >> $GITHUB_ENV
          echo "SERVER_PUBLIC_KEY=$SERVER_PUBLIC_KEY" >> $GITHUB_ENV

          # Create test file for SCP testing
          echo "Hello from GitHub Actions test!" > test_upload.txt

          # Get SSH private key content
          SSH_PRIVATE_KEY=$(cat test_ssh_key)

          # Store SSH key in environment
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          echo "$SSH_PRIVATE_KEY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          SSH_HOST_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7test"
          echo "SSH_HOST_KEY=$SSH_HOST_KEY" >> $GITHUB_ENV

      - name: Test action configuration and validation (will fail at connection)
        id: test-connection
        continue-on-error: true
        uses: ./
        with:
          operation: ssh
          command: 'echo "This should fail at WireGuard connection"'
          ping-check: 'false'
          wireguard-private-key: ${{ env.CLIENT_PRIVATE_KEY }}
          wireguard-address: '10.13.13.2/24'
          wireguard-dns: '1.1.1.1'
          wireguard-peer-public-key: ${{ env.SERVER_PUBLIC_KEY }}
          wireguard-endpoint: 'nonexistent.example.com:51820'
          wireguard-allowed-ips: '10.13.13.0/24'
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}
          ssh-user: 'testuser'
          ssh-hostname: 'test-server'
          ssh-host-ip: '10.13.13.1'
          ssh-host-key: ${{ env.SSH_HOST_KEY }}
          ssh-port: '22'

      - name: Test SCP validation - missing parameters
        id: test-scp-validation
        continue-on-error: true
        uses: ./
        with:
          operation: scp
          # Missing scp-source and scp-destination - should fail validation
          ping-check: 'false'
          wireguard-private-key: ${{ env.CLIENT_PRIVATE_KEY }}
          wireguard-address: '10.13.13.2/24'
          wireguard-dns: '1.1.1.1'
          wireguard-peer-public-key: ${{ env.SERVER_PUBLIC_KEY }}
          wireguard-endpoint: 'nonexistent.example.com:51820'
          wireguard-allowed-ips: '10.13.13.0/24'
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}
          ssh-user: 'testuser'
          ssh-hostname: 'test-server'
          ssh-host-ip: '10.13.13.1'
          ssh-host-key: ${{ env.SSH_HOST_KEY }}
          ssh-port: '22'

      - name: Verify SCP validation worked
        run: |
          if [ "${{ steps.test-scp-validation.outcome }}" = "failure" ]; then
            echo "✅ SCP validation test passed - correctly failed"
          else
            echo "❌ SCP validation test failed - should have failed"
            exit 1
          fi

      - name: Test ping check can be disabled
        id: test-no-ping
        continue-on-error: true
        uses: ./
        with:
          operation: ssh
          command: 'echo "Testing without ping check"'
          ping-check: 'false'
          wireguard-private-key: ${{ env.CLIENT_PRIVATE_KEY }}
          wireguard-address: '10.13.13.2/24'
          wireguard-dns: '1.1.1.1'
          wireguard-peer-public-key: ${{ env.SERVER_PUBLIC_KEY }}
          wireguard-endpoint: 'nonexistent.example.com:51820'
          wireguard-allowed-ips: '10.13.13.0/24'
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}
          ssh-user: 'testuser'
          ssh-hostname: 'test-server'
          ssh-host-ip: '10.13.13.1'
          ssh-host-key: ${{ env.SSH_HOST_KEY }}
          ssh-port: '22'

      - name: Validate action structure and logic
        run: |
          echo "✅ Action configuration and validation tests completed"
          echo "Note: Connection tests are expected to fail in CI environment"
          echo "The action properly validates inputs and configurations"

      - name: Cleanup test files
        if: always()
        run: |
          rm -f test_ssh_key test_ssh_key.pub test_upload.txt
